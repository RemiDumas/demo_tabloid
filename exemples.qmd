# Réaliser un tableau {.unnumbered}

```{r}
#| include: false
#| label: packagesdonnees
library('dplyr')
library('tabloid')
library('tidyr')
library('gt')
grandile <- readRDS('donnees/grandile.rds')
gapminder <- readRDS('donnees/gapminder.rds')
```

## Chargement des packages et des données

Nous aurons besoin des packages `tabloid` et `dplyr` pour le traitement des données (voir @citedplyr).

```{r}
#| eval: false
library('dplyr')
library('tabloid')
grandile <- readRDS('donnees/grandile.rds')
glimpse(grandile)
```

```{r}
#| echo: false
glimpse(grandile)
```

## Réaliser un tri à plat
Le package tabloid fournit un ensemble de fonctions utiles à la réalisation de tableaux statistiques. La première fonction à employer est `tab_build()`. 

::: callout-caution
## La fonction tab_build()
Les paramètres:

- `var_rows`: les variables de comptage ventilée en lignes,
- `var_cols`: les variables de comptage ventilée en colonnes,
- `var_stat`: la variable de comptage,
- `stat`: la statistique à utiliser (par défaut "count"): 
    - "mean" : moyenne,
    - "min" : minimum,
    - "max" : maximum,
    - "median" : médiane,
    - "sum" : somme,
    - "quantile" : quantile,
    - "weighted_mean" : moyenne pondérée,
    - "weighted_sum" : somme pondérée
- `var_w`: la variable de pondération, 
- `probs`: quantile à calculer si `stat` est "quantile",
- `lab_total`: Le texte pour la marge (par défaut "Ensemble")

:::

On réalise un tri à plat sur la variable MODCOHA.

```{r}
#| label: tbl-modcoha1
#| tbl-cap: Répartition des ménages de Grandile selon le mode de cohabitation
tab1 <- grandile %>% 
  tab_build(var_rows = MODCOHA)
tab1
```

::: callout-warning
## Ordre des modalités
On remarque que les modalités ne s'affichent pas dans l'ordre alphanumérique croissant. Il faut trier la table au préalable:
```{r}
#| label: tbl-modcoha2
#| tbl-cap: Répartition des ménages de Grandile selon le mode de cohabitation
tab1 <- grandile %>% 
  arrange(MODCOHA) %>% 
  tab_build(var_rows = MODCOHA)
tab1
```
:::

### Profil colonne

La fonction `tab_pct()` calcule les profils lignes ou colonnes. 

::: {layout-ncol="2"}
#### Pour un profil ligne
``` r
#| label: exemple-tabpct1
tab %>%
  tab_pct(
    pct = "row"
  )
```

#### Pour un profil colonne
``` r
#| label: exemple-tabpct1
tab %>%
  tab_pct(
    pct = "col"
  )
```
:::

Transformons notre tableau de comptage en calculant les parts de chaque modalités dans la population de Grandile:
```{r}
#| label: tbl-modcoha3
#| tbl-cap: Répartition des ménages de Grandile selon le mode de cohabitation
tab1b <- tab1 %>% 
  tab_pct(
    pct = "col"
  )
tab1b
```

### Affichage d'arrondis
La fonction `tab_round()` permet d'arrondir les données des cellules, et éventuellement de gérer la cohérence des sommes à 100 % pour les pourcentages lignes et colonnes, en proposant différentes règles de décision.

::: callout-caution
```r
tab_round(
  tab,
  n = 0,
  guarantee_100 = FALSE,
  option = "lowest_lie",
  verbose = FALSE
)
```

- `n`: indique le nombre de décimales à afficher
- `guarantee_100`: gère la cohérence des arrondis
- `option`: comment la garantie à 100 va être supportée
- `verbose`: affiche dans la console des informations sur le traitement 
:::

Arrondissons le tableau précédent à une décimale:

```{r}
#| label: tbl-modcoha4
#| tbl-cap: Répartition des ménages de Grandile selon le mode de cohabitation
tab1c <- tab1b %>% 
  tab_round(
    n = 1
  ) 
tab1c
```

::: callout-tip
La console n'affiche pas toutes les décimales, par exemple:
```{r}
tab1b %>% 
  tab_round(
    n = 3
  ) 
```

Il faut préciser le nombre de chiffres affichés (par exemple 7) grâce à la commande `pillar::pillar_options()` (voir @pillaroptions). La commande `options(old)` permet de revenir au paramétrage initial.

```{r}
old <- options(pillar.sigfig = 7)

tab1b %>% 
  tab_round(
    n = 3,
    guarantee_100 = FALSE
  ) 
options(old)
```

:::

### Masquer des cellules

La fonction `tab_mask()` permet de masquer les cellules d'un tableau :
- les cellules non-nulles inférieures à un seuil, en nombre de lignes ou en somme de la variable `var_stat`
- les cellules correspondant aux marges

```r
tab_mask(
  tab,
  threshold_count = NULL,
  threshold_sum = NULL,
  mask_total = "",
  verbose = TRUE
)
```

- `threshold_count`: nombre de lignes de la table initiale en-deça duquel la valeur est masquée (exclusif)
- `threshold_sum`: à renseigner pour `stat = sum`, valeur de la cellule en-deça de laquelle la valeur est masquée (exclusif)
- `mask_total`: masquage ou non des totaux:
    - "cols" : masquage des totaux en colonnes
    - "rows" : masquage des totaux en lignes
    - c("rows", "cols") : masquage de l'ensemble des totaux
- `verbose`: affichage ou non du nombre de cellules masquées par la fonction

Masquons les modalités comprenant moins de 500 individus, sans masquer le total:
```{r}
#| label: tbl-modcoha5
#| tbl-cap: Répartition des ménages de Grandile selon le mode de cohabitation

tab1 %>% 
  tab_mask(
    threshold_count = 500
  )
```

### Exporter un tableau
Le package présente deux options pour exporter les tableaux générés.

#### Export vers Calc
La fonction tab_xlsx() permet d'enregistrer le tableau mis en forme dans un fichier .xlsx.

```r
tab_xlsx(
  tab,
  path,
  sheet,
  title = "",
  note = "",
  lab_rows = NULL,
  lab_cols = NULL,
  open_wb = TRUE,
  update = TRUE
)
```

- `path`: chemin dans lequel exporter le tableau
- `sheet`: nom de l'onglet dans le classeur - si l'onglet existe déjà, il sera mis à jour avec update = TRUE
- `title`: titre
- `note`: note de bas de page
- `lab_rows`: nouveaux libellés pour les variables lignes
- `lab_cols`: nouveaux libellés pour les modalités des variables colonnes
- `open_wb`: ouverture du classeur crée pour visualisation
- `update`: mise à jour de l'onglet s'il existe déjà dans le classeur (attention, par défaut: TRUE ce qui écrasera les versions existantes)

Exportons notre tableau dans un sous répertoire. Donnons lui un titre, une source et modifions le nom de la variable `MODCOHA` en *Mode de cohabitation*.

```{r}
#| eval: false
#| label: exportxlsx
if(!dir.exists("_sorties")){dir.create("_sorties")}

tab1c %>% 
  tab_xlsx(
    path = "_sorties/tableaux.xlsx", 
    sheet = "MODCOHA",
    title = "Répartition des ménages de Grandile selon le mode de cohabitation",
    note = "Source: Cefil 2025",
    lab_rows = "Mode de cohabitation"
    )
```

Le résultat:

![](exportxlsx.jpg){style="display: block; margin: auto;"}

#### Document Quarto
Il suffit d'inclure la fonction `tab_render()` à la suite de la production du tableau dans un chunk. Par exemple, le tri à plat des ménages de Grandile par mode de cohabitation.

```{r}
tab1 %>% 
  rename(Effectif = count) %>% 
  left_join(
  tab1b %>% 
    tab_round(
      n = 1
    ) %>% 
    rename('Part (en %)' = count)
  ) %>% 
  tab_render(
    title = "Répartition des ménages de Grandile selon le mode de cohabitation",
    note= "Source: Cefil 2025",
    lab_rows = "Mode de cohabitation"
  )
```


## Tableaux de contingence
Une table de contingence est un moyen pour présenter simultanément et de manière croisée deux données statistiques. Elle permet d'estimer la dépendance et la relation entre deux caractères observés sur une même population. Le tableau à double entrée est utilisé pour rassembler les effectifs partiels.

### Croisement entre le diplôme et la PCS
```{r}
#| column: page
#| label: tbl-DIPLxPCS1
#| tbl-cap: Croisement entre le diplôme et la PCS de la personne de référence des ménages de Grandile

tab2 <- grandile %>% 
  arrange(DIPL, PCS) %>% 
  tab_build(
    var_rows = DIPL,
    var_cols = PCS
  )

tab2
```

et leur profil ligne, permettant de voir les surreprésentations des diplômés dans les PCS.

```{r}
#| column: page
#| label: tbl-DIPLxPCS2
#| tbl-cap: Croisement entre le diplôme et la PCS de la personne de référence des ménages de Grandile

tab2b <- tab2 %>% 
  tab_pct(pct = "row") %>% 
  tab_round(n = 1) 

tab2b %>% 
  tab_render()
```

## Tableaux d'indicateurs statistiques

### Tableaux de cumuls

Calculons le nombre total de personnes, d'après la variable NBPERS, selon la PCS de la personne de référence du ménage.

```{r}
#| label: tbl-NBPERSPCS
#| caption: Nombre de personnes vivant dans les ménages de Grandile selon la PCS de la personne de référence
tab3 <- grandile %>% 
  arrange(PCS) %>% 
  tab_build(var_rows = PCS,
            var_stat = NBPERS,
            stat = "mean") %>% 
  tab_round(n = 1) 

tab3 %>% 
  tab_render()
```

### Tableaux de moyennes

Calculons le revenu moyen des habitants, d'après la variable REVENU, selon la PCS de la personne de référence du ménage. On doit pondérer par le nombre de personnes composant le ménage.

```{r}
#| label: tbl-REVENUmoyPCS
#| caption: Revenu moyen des individus de de Grandile selon la PCS de la personne de référence
tab4 <- grandile %>% 
  arrange(PCS) %>% 
  tab_build(
    var_rows = PCS,
    var_stat = REVENU,
    var_w = NBPERS,
    stat = "weighted_mean"
  ) %>% 
  tab_round(n = -2) # arrondi à la centaine d'€

tab4 %>% 
  tab_render()
```

## Tableaux en évolution

### Une seule variable d'interêt
Nous allons réaliser un tableau des populations des pays d'Europe de l'Ouest (région "Western Europe") en 1990 et 2010 à partir des données de Gapminder (voir @citegapminder). 

Tout d'abord chargeons le jeu de données.

```{r}
#| eval: false
gapminder <- readRDS('donnees/gapminder.rds')
                     
glimpse(gapminder)
```

```{r}
#| echo: false
                     
glimpse(gapminder)
```

Construisons le tableau et affichons le:
```{r}
#| label: pop9015WE

tab5 <- gapminder %>% 
  filter(year %in% c(1990, 2010), region == "Western Europe") %>% 
  mutate(year = as.character(year)) %>% 
  arrange(country) %>% 
  tab_build(
    var_rows = country,
    var_cols = year,
    var_stat = population,
    stat = "sum") 

tab5
```

Nous disposons de la marge en colonne, qui n'a pas de sens pour une série chronologique. Heureusement, l'objet `tab5` peut être modifié, car c'est un tibble !

```{r}
#| label: pop9015WE2
tab5 <- tab5 %>% 
  select(-Ensemble)

tab5
```

C'est mieux, nous allons pouvoir effectuer un rendu dans le document:

```{r}
#| label: tbl-pop9015WE
tab5 %>% 
  tab_render(
    title = "Évolution de la population des pays d'Europe de l'Ouest entre 1990 et 2010",
    note = "Source: Gapminder",
    lab_rows = "Pays"
  )
```

::: callout-note
## Variables quantitatives
Vous aurez remarqué que nous avons transformé la variable `year` en variable catégorielle à l'aide de `as.character()`. En effet, `tabloid` ne permet pas de ventiler les individus selon des modalités quantitatives.
:::

### Deux variables d'interêt

Ce tableau affichera l'évolution du PIB (variable gdp) et du nombre d'habitants dans les pays de la région "Western Europe" en 1990 et en 2010.

On ne peut pas préciser plusieurs variables au paramètre `var_stat =`. On doit donc représenter une seule variable qui prendra plusieurs modalités. Par exemple une variable `indic` dont les valeurs seront dans une variable `val` qui sera la variable d'intérêt de `tabloid.`

Commençons par préparer les données à l'aide du package `tidyr` (voir @citetidyr).
```{r}
#| eval: false
library('tidyr')

datatab6 <- gapminder %>% 
  tidyr::pivot_longer(cols = c(gdp, population), names_to = "indic", values_to = "val") %>% 
  filter(year %in% c(1990, 2010), region == "Western Europe") %>% 
  mutate(year = as.character(year)) %>% 
  arrange(country)
```

```{r}
#| label: prepadatatab6
library('tidyr')

datatab6 <- gapminder %>% 
  filter(year %in% c(1990, 2010), region == "Western Europe") %>% 
  tidyr::pivot_longer(cols = c(gdp, population), names_to = "indic", values_to = "val") %>% 
  mutate(year = as.character(year)) %>% 
  arrange(country)
```

La fonction `pivot_longer(`) transforme les données (plus exactement les colonnes `gdp` et `population`) ce qui nous sera utile lorsque l'on voudra utiliser `tabloid`. En effet, dans le code ci-dessous, vous remarquez que si les pays (classés par ordre alphabétique) sont en lignes (paramètre `var_rows =`), les colonnes prennent comme variable l'année (`year`) et l'indicateur (`gdp` ou `population`) transformé en longueur par `pivot_longer()`. On n'oubliera pas d'enlever toutes les colonnes dont le nom termine par *"Ensemble"*.

```{r}
#| label: gdppop9910WE
tab6 <- datatab6 %>% 
  tab_build(
    var_rows = country,
    var_cols = c(year, indic),
    var_stat = val,
    stat = "sum") %>% 
  select(-ends_with("Ensemble"))

tab6
```

On effectue un rendu du tableau:

```{r}
#| label: tbl-gdppop9910WE
tab6 %>% 
  tab_render(
    title = "Évolution de la population et du PIB des pays d'Europe de l'Ouest entre 1990 et 2010",
    note = "Source: Gapminder",
    lab_rows = "Pays",
    lab_cols = list(indic = c("PIB", "Population"))
  )
```

### Série chronologique

Construisons un tableau des évolutions de l'espérance de vie (variable `life_expectancy`) entre 2000 et 2010. Pour construire la marge, nous calculerons la moyenne pondérée selon la population du pays.
```{r}
#| label: pop0010SA

tab7 <- gapminder %>%
  filter(year %in% 2000:2010, region == "South America") %>% 
  mutate(year = as.character(year)) %>% 
  arrange(country) %>% 
  tab_build(
    var_rows = country, 
    var_cols = year, 
    var_stat = life_expectancy, 
    stat = "weighted_mean", 
    var_w = population)
tab7
```

On arrondit à une décimale et on supprime la colonne Ensemble:
```{r}
#| label: pop0010SA2
tab7 <- tab7 %>% 
  tab_round(n = 1) %>% 
  select(-ends_with("Ensemble")) 
tab7
```

```{r}
#| label: tbl-pop0010SA
tab7 %>% 
  tab_render(
    title = "Évolution de l'espérance de vie en Amérique du Sud entre 2000 et 2010",
    note = "Source: Gapminder",
    lab_rows = "Pays"
  )
```

::: callout-tip
## Supprimer la ligne Ensemble
Cette marge régionale pose problème. En effet, l'hypothèse retenue est trop forte, il faudrait calculer l'espérance de vie de cet ensemble de pays en reprenant les structures de mortalité et en les agrégeant. On va supprimer cette ligne:

```{r}
#| label: pop0010SA3
tab7 <- tab7 %>% 
  filter(country != "Ensemble")

tab7 %>% 
  tab_render(
    title = "Évolution de l'espérance de vie en Amérique du Sud entre 2000 et 2010",
    note = "Source: Gapminder",
    lab_rows = "Pays"
  )
```
:::

## Compléments sur la mise en forme

### Utilisation de kableExtra pour mettre en forme un rendu html
L’objet généré par la fonction `tab_render()` étant un `kable`, on peut le modifier avec `kableExtra` et formater les cellules, en incluant des conditions, gérer les largeurs de colonnes, les notes de bas de tableau, les renvois, etc ...(voir @citekableExtra)

Par exemple, avec le @tbl-gdppop9910WE on peut ajouter:

```{r}
library('kableExtra')
tab6 %>% 
  tab_render(
    title = "Évolution de la population et du PIB des pays d'Europe de l'Ouest entre 1990 et 2010",
    note = "Source: Gapminder",
    lab_rows = "Pays",
    lab_cols = list(indic = c("PIB", "Population"))
  ) %>% 
  column_spec(4:5, bold = T,background = "ivory2") %>% 
  row_spec(3, bold = TRUE, italic = TRUE, color = "white", background = "steelblue1")%>% 
  row_spec(4, color = "tan3") 
```


### Utiliser `gt()` plutôt que `tab_render()`

On peut préférer `gt` (voir @citegt) pour générer les rendus de tableaux, et ne conserver que la partie computationnelle de `tabloid`.

```{r}
#| eval: false

library('gt')
```

```{r}
#| label: gttabloid
tab5 %>% 
  gt() %>% 
  fmt_number(locale = "fr", decimals = 0) %>% 
  cols_label(
    country = "Pays"
  ) %>% 
  tab_header(
    title = "Évolution de la population des pays d'Europe de l'Ouest entre 1990 et 2010"
  ) %>% 
  tab_source_note(
    source_note = "Source: Gapminder"
  ) %>%  
  tab_style(style = list(cell_fill(color = "lightgrey"), cell_text(weight = "bold")), 
            locations =list(cells_body(columns = "2010"), cells_body(rows = country == "Ensemble")))
```

